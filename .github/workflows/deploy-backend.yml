name: Deploy Backend (WebSocket + REST API)

on:
  push:
    branches:
      - main

jobs:
  deploy-websocket:
    name: Deploy WebSocket (Cloud Run)
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@v4'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          service_account: '${{ secrets.GCP_SA_EMAIL }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Configure Docker to use the gcloud command'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: 'Build Docker image for WebSocket'
        run: docker build --build-arg ENTRY_FILE=bootstrap-ws -t ${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }} .

      - name: 'Push Docker image to Artifact Registry'
        run: docker push ${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }}

      - name: 'Deploy WebSocket to Cloud Run'
        run: |
          gcloud run deploy ${{ secrets.GCP_CR_NAME_WEBSOCKET }} \
            --image=${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }} \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --timeout=300 \
            --service-account=${{ secrets.GCP_SA_EMAIL }} \
            --add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }} \
            --set-env-vars="\
              NODE_ENV=production,\
              MODE=WS,\
              DB_HOST=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }},\
              DB_PORT=5432,\
              DB_SYNCHRONIZE=false,\
              DB_LOGGING=false,\
              DB_SSL_ENABLED=false,\
              CLOUD_SQL_CONNECTION_NAME=${{ secrets.GCP_SQL_CONNECTION_NAME }}" \
            --update-secrets="\
              DB_USERNAME=DB_USERNAME:latest,\
              DB_PASSWORD=DB_PASSWORD:latest,\
              DB_DATABASE=DB_DATABASE:latest,\
              JWT_SECRET=JWT_SECRET:latest,\
              FRONTEND_URL=FRONTEND_URL:latest,\
              CHATGPT_API_KEY=CHATGPT_API_KEY:latest,\
              DART_OPENAPI_KEY=DART_OPENAPI_KEY:latest,\
              KAKAO_CLIENT_ID=KAKAO_CLIENT_ID:latest,\
              KAKAO_CLIENT_SECRET=KAKAO_CLIENT_SECRET:latest,\
              KAKAO_CALLBACK_URL=KAKAO_CALLBACK_URL:latest" \
            --port=8080 \
            --min-instances=1 \
            --use-http2 \
            --quiet

  deploy-functions:
    name: Deploy REST API (Cloud Functions)
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: write
    needs: deploy-websocket

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@v4'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          service_account: '${{ secrets.GCP_SA_EMAIL }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Build NestJS application'
        run: npm run build

      - name: 'Deploy REST API to Cloud Functions'
        run: |
          gcloud functions deploy ${{ secrets.GCP_CF_NAME_REST_API }} \
            --entry-point=stockweatherRestApi \
            --runtime=nodejs20 \
            --trigger-http \
            --allow-unauthenticated \
            --region=${{ secrets.GCP_REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --service-account=${{ secrets.GCP_SA_EMAIL }} \
            --memory=256MB \
            --timeout=300s \
            --gen2 \
            --source=dist \
            --set-env-vars="\
                NODE_ENV=production,\
                MODE=REST,\
                DB_HOST=${{ secrets.GCP_SQL_PUBLIC_IP }},\
                DB_PORT=5432,\
                DB_SYNCHRONIZE=false,\
                DB_LOGGING=false,\
                DB_SSL_ENABLED=false,\
                CLOUD_SQL_CONNECTION_NAME=${{ secrets.GCP_SQL_CONNECTION_NAME }}" \
            --set-secrets="\
                DB_USERNAME=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DB_USERNAME:latest,\
                DB_PASSWORD=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DB_PASSWORD:latest,\
                DB_DATABASE=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DB_DATABASE:latest,\
                JWT_SECRET=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/JWT_SECRET:latest,\
                CHATGPT_API_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/CHATGPT_API_KEY:latest,\
                DART_OPENAPI_KEY=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/DART_OPENAPI_KEY:latest,\
                KAKAO_CLIENT_ID=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/KAKAO_CLIENT_ID:latest,\
                KAKAO_CLIENT_SECRET=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/KAKAO_CLIENT_SECRET:latest,\
                KAKAO_CALLBACK_URL=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/KAKAO_CALLBACK_URL:latest,\
                FRONTEND_URL=projects/${{ secrets.GCP_PROJECT_ID }}/secrets/FRONTEND_URL:latest" \
            --quiet
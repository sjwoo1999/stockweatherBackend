# ðŸš€ Deploy Backend (WebSocket + REST API)

name: Deploy Backend (WebSocket + REST API)

on:
  push:
    branches:
      - main

jobs:
  deploy-websocket:
    name: Deploy WebSocket (Cloud Run)
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@v4'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          service_account: '${{ secrets.GCP_SA_EMAIL }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Configure Docker to use gcloud'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Install dependencies
        run: npm ci

      - name: 'Build project (WebSocket)'
        run: npm run build:ws

      - name: 'Build Docker image for WebSocket'
        run: docker build -f Dockerfile.websocket -t ${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }} .

      - name: 'Push Docker image to Artifact Registry'
        run: docker push ${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }}

      - name: 'Deploy WebSocket to Cloud Run'
        run: |
          gcloud run deploy ${{ secrets.GCP_CR_NAME_WEBSOCKET }} \
             --image=${{ secrets.GCP_AR_IMAGE_PATH_WEBSOCKET }}:${{ github.sha }} \
             --region=${{ secrets.GCP_REGION }} \
             --allow-unauthenticated \
             --timeout=300 \
             --service-account=${{ secrets.GCP_SA_EMAIL }} \
             --add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }} \
             --set-env-vars="\
               NODE_ENV=production,\
               MODE=WS,\
               DB_HOST=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }},\
               DB_PORT=5432,\
               DB_SYNCHRONIZE=false,\
               DB_LOGGING=false,\
               DB_SSL_ENABLED=false,\
               CLOUD_SQL_CONNECTION_NAME=${{ secrets.GCP_SQL_CONNECTION_NAME }},\
               FRONTEND_URL=https://stockweather-frontend.vercel.app" \
             --update-secrets="\
               DB_USERNAME=DB_USERNAME:latest,\
               DB_PASSWORD=DB_PASSWORD:latest,\
               DB_DATABASE=DB_DATABASE:latest,\
               JWT_SECRET=JWT_SECRET:latest,\
               CHATGPT_API_KEY=CHATGPT_API_KEY:latest,\
               DART_OPENAPI_KEY=DART_OPENAPI_KEY:latest,\
               KAKAO_CLIENT_ID=KAKAO_CLIENT_ID:latest,\
               KAKAO_CLIENT_SECRET=KAKAO_CLIENT_SECRET:latest,\
               KAKAO_CALLBACK_URL=KAKAO_CALLBACK_URL:latest" \
             --port=8080 \
             --min-instances=1 \
             --no-use-http2 \
             --quiet

  deploy-rest-api:
    name: Deploy REST API (Cloud Run)
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
    needs: deploy-websocket

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@v4'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          service_account: '${{ secrets.GCP_SA_EMAIL }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: 'Configure Docker to use gcloud'
        run: gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Install dependencies
        run: npm ci

      - name: 'Build project (REST API)'
        run: npm run build:rest
      
      - name: 'Build Docker image for REST API'
        run: docker build -f Dockerfile.rest -t ${{ secrets.GCP_AR_IMAGE_PATH_REST_API }}:${{ github.sha }} .

      - name: 'Push Docker image to Artifact Registry'
        run: docker push ${{ secrets.GCP_AR_IMAGE_PATH_REST_API }}:${{ github.sha }}

      - name: 'Deploy REST API to Cloud Run'
        run: |
          gcloud run deploy ${{ secrets.GCP_CR_NAME_REST_API }} \
            --image=${{ secrets.GCP_AR_IMAGE_PATH_REST_API }}:${{ github.sha }} \
            --region=${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --timeout=300 \
            --service-account=${{ secrets.GCP_SA_EMAIL }} \
            --add-cloudsql-instances=${{ secrets.GCP_SQL_CONNECTION_NAME }} \
            --memory=512Mi \
            --ingress=all \
            --set-env-vars="\
              NODE_ENV=production,\
              MODE=REST,\
              OPENAI_FUNCTION_URL=${{ secrets.OPENAI_FUNCTION_URL }},\
              WEBSOCKET_SERVER_URL=${{ secrets.WEBSOCKET_SERVER_URL }},\
              DB_HOST=/cloudsql/${{ secrets.GCP_SQL_CONNECTION_NAME }},\
              DB_PORT=5432,\
              DB_SYNCHRONIZE=false,\
              DB_LOGGING=false,\
              DB_SSL_ENABLED=false,\
              CLOUD_SQL_CONNECTION_NAME=${{ secrets.GCP_SQL_CONNECTION_NAME }},\
              FRONTEND_URL=https://stockweather-frontend.vercel.app" \
            --update-secrets="\
              DB_USERNAME=DB_USERNAME:latest,\
              DB_PASSWORD=DB_PASSWORD:latest,\
              DB_DATABASE=DB_DATABASE:latest,\
              JWT_SECRET=JWT_SECRET:latest,\
              CHATGPT_API_KEY=CHATGPT_API_KEY:latest,\
              DART_OPENAPI_KEY=DART_OPENAPI_KEY:latest,\
              KAKAO_CLIENT_ID=KAKAO_CLIENT_ID:latest,\
              KAKAO_CLIENT_SECRET=KAKAO_CLIENT_SECRET:latest,\
              KAKAO_CALLBACK_URL=KAKAO_CALLBACK_URL:latest" \
            --port=8080 \
            --min-instances=0 \
            --no-use-http2 \
            --quiet
name: Deploy Backend to Cloud Run

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때마다 워크플로우 실행
    paths:
      - 'backend/**' # backend 폴더 안의 파일 변경 시 트리거

env:
  GCP_PROJECT_ID: stockweather # 본인의 GCP 프로젝트 ID로 변경
  GCP_REGION: asia-northeast3 # Cloud Run을 배포할 리전
  ARTIFACT_REGISTRY_REPO: cloud-run-source-deploy # Artifact Registry Repository 이름
  SERVICE_NAME: stockweather-backend # Cloud Run 서비스 이름
  # ⭐ 중요: Cloud SQL 인스턴스의 정확한 연결 이름 ⭐
  # GCP 콘솔 > Cloud SQL > 인스턴스 클릭 > '개요' 탭에서 '인스턴스 연결 이름' 확인
  # 예시: 'my-gcp-project:asia-northeast3:my-sql-instance-name'
  GCP_SQL_INSTANCE_CONNECTION_NAME: stockweather:asia-northeast3:stockweather-cloud-sql # ⭐⭐ 이 값을 실제 Cloud SQL 인스턴스 연결 이름으로 변경해야 합니다! (SERVICE_NAME 아님) ⭐⭐

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # OIDC를 사용하여 GCP 인증을 위한 권한

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20' # 프로젝트에 맞는 Node.js 버전

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        # 본인의 워크로드 아이덴티티 제공자 이름으로 변경
        workload_identity_provider: 'projects/${{ env.GCP_PROJECT_ID }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        # 본인의 서비스 계정 이메일로 변경 (Cloud Run 배포 및 Artifact Registry 접근 권한 필요)
        service_account: 'stockweather-db-connect@@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

    - name: Docker Login to Artifact Registry
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and Deploy to Cloud Run
      run: |
        IMAGE_NAME=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:latest
        
        docker build -t $IMAGE_NAME ./backend # Dockerfile이 backend 폴더 안에 있으므로 경로 지정
        docker push $IMAGE_NAME

        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image $IMAGE_NAME \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --add-cloudsql-instances ${{ env.GCP_SQL_INSTANCE_CONNECTION_NAME }} \ # ⭐⭐⭐ Cloud SQL Proxy 사용을 위해 다시 추가하고, 정확한 인스턴스 연결 이름 변수를 사용합니다. ⭐⭐⭐
          --set-env-vars "DB_HOST=127.0.0.1,\ # ⭐ Cloud SQL Proxy를 사용하므로 DB_HOST를 127.0.0.1로 고정합니다. ⭐
            DB_PORT=5432,\ 
            DB_USERNAME=${{ secrets.DB_USERNAME }},\
            DB_DATABASE=${{ secrets.DB_DATABASE }},\
            DB_PASSWORD=${{ secrets.DB_PASSWORD }},\
            DB_SSL_ENABLED=false,\
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }},\
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }},\
            KAKAO_CALLBACK_URL=${{ secrets.KAKAO_CALLBACK_URL }},\
            JWT_SECRET=${{ secrets.JWT_SECRET }},\
            CHATGPT_API_KEY=${{ secrets.CHATGPT_API_KEY }},\
            FRONTEND_URL=${{ secrets.FRONTEND_URL }},\
            DB_SYNCHRONIZE=false,\
            DB_LOGGING=false,\
            DART_OPENAPI_KEY=${{ secrets.DART_OPENAPI_KEY }}" \ # ⭐⭐⭐ DART API Key 변수를 여기에 추가합니다. ⭐⭐⭐
          --timeout=600s \
          --port 8080 # 컨테이너가 8080 포트에서 리슨할 것임을 Cloud Run에 알림
      working-directory: ./backend # backend 폴더에서 명령 실행
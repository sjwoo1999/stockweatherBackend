# .github/workflows/deploy-websocket.yml
name: Deploy WebSocket to Cloud Run

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

env:
  PROJECT_ID: stockweather
  SERVICE_NAME: stockweather-websocket # Cloud Run 서비스 이름 (WebSocket 전용)
  REGION: asia-northeast3
  ARTIFACT_REGISTRY_FULL_IMAGE_PATH: asia-northeast3-docker.pkg.dev/stockweather/stockweather-websocket/stockweather-backend # WebSocket 서비스용 이미지 경로
  GCP_SERVICE_ACCOUNT: stockweather-db-connect@stockweather.iam.gserviceaccount.com
  GCP_SQL_INSTANCE_CONNECTION_NAME: stockweather:asia-northeast3:stockweather
  
  # Cloud Run용 환경 변수 (WebSocket 서비스에만 필요한 값들)
  MODE: 'WS'
  DB_HOST: 127.0.0.1
  DB_PORT: 5432
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_DATABASE: ${{ secrets.DB_DATABASE }}
  DB_SYNCHRONIZE: 'false'
  DB_LOGGING: 'false'
  DB_SSL_ENABLED: 'true'
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
  # WebSocket에서 AI나 DART API를 직접 호출하지 않는다면 관련 키는 필요 없습니다.
  # 필요한 경우 Pub/Sub 토픽 이름 등을 여기에 추가할 수 있습니다.

jobs:
  deploy-websocket:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Google Cloud 인증에 필요

    steps:
      - name: Checkout repository
        uses: 'actions/checkout@v4'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          # ⭐⭐⭐ 수정된 부분: 프로젝트 번호와 풀 ID만 포함합니다. ⭐⭐⭐
          workload_identity_provider: 'projects/1011872961068/locations/global/workloadIdentityPools/github-pool/providers/github-pool'
          service_account: '${{ env.GCP_SERVICE_ACCOUNT }}'

      - name: 'Set up Cloud SDK and Docker auth'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: 'Configure Docker to use the gcloud command'
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: 'Build Docker image for WebSocket'
        # Dockerfile은 앱 전체 코드를 빌드하지만, 런타임에 MODE=WS로 실행됩니다.
        run: docker build -t ${{ env.ARTIFACT_REGISTRY_FULL_IMAGE_PATH }}:${{ github.sha }} .

      - name: 'Push Docker image to Artifact Registry'
        run: docker push ${{ env.ARTIFACT_REGISTRY_FULL_IMAGE_PATH }}:${{ github.sha }}

      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.REGION }}
          image: ${{ env.ARTIFACT_REGISTRY_FULL_IMAGE_PATH }}:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --timeout 300
            --service-account ${{ env.GCP_SERVICE_ACCOUNT }}
            --add-cloudsql-instances ${{ env.GCP_SQL_INSTANCE_CONNECTION_NAME }}
            --set-env-vars MODE=${{ env.MODE }}
            --set-env-vars DB_HOST=${{ env.DB_HOST }}
            --set-env-vars DB_PORT=${{ env.DB_PORT }}
            --set-env-vars DB_USERNAME=${{ secrets.DB_USERNAME }}
            --set-env-vars DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            --set-env-vars DB_DATABASE=${{ secrets.DB_DATABASE }}
            --set-env-vars DB_SYNCHRONIZE=${{ secrets.DB_SYNCHRONIZE }}
            --set-env-vars DB_LOGGING=${{ secrets.DB_LOGGING }}
            --set-env-vars DB_SSL_ENABLED=${{ secrets.DB_SSL_ENABLED }}
            --set-env-vars JWT_SECRET=${{ secrets.JWT_SECRET }}
            --set-env-vars FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            --set-env-vars CLOUD_SQL_CONNECTION_NAME=${{ env.GCP_SQL_INSTANCE_CONNECTION_NAME }}
            --port 3000
            --min-instances 1
          env_vars_update_strategy: merge
          secrets_update_strategy: merge